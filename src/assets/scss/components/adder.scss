@use '../abstracts/mixins.scss' as *;
@use '../layout/item.scss';

/*.adder {
  display: grid;
  gap: calc(var(--base-size) * 4);
  grid-area: adder;
  align-self: start;

  grid-template-columns: 1fr;
  justify-items: stretch;
  align-items: flex-start;
  //align-items: stretch;

  @include mq(medium) {
    grid-template-columns: 6fr 5fr;

    & .alerts {
      grid-row: 1 / 3;
      grid-column: 2 / 3;
    }
  }
}*/

form {
  display: grid;
  gap: calc(var(--base-size) * 2);
  grid-column: 1;
  max-width: calc(var(--base-size) * 100);

  @include mq(medium) {
    //&:not(.narrow) {
      width: calc(var(--base-size) * 100);
    //}
  }

  & .row {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--base-size);
    
    @include mq(small) {
      grid-template-columns: 2fr minmax(5rem, 1fr);
    }
  }

  & .label-group {
    position: relative;

    &:focus, &:focus-within {
      & label {
        opacity: 0;
      }
    }

    & label {
      position: absolute;
      user-select: none;
      top: calc(var(--base-size) + .1em);
      left: calc(var(--base-size) * 2 + .2em);
      pointer-events: none;
      transition: opacity 150ms ease-in;
      opacity: 0.75;

      &:not([data-value="false"]) {
          opacity: 0;
      }
    }
  }

  input, textarea {
    @extend .item;
    background-color: inherit;
    border-style: dashed;
    resize: vertical;
  }

  & .buttons {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: var(--base-size);
  }
}

:where(input, textarea) {
  padding: var(--base-size) calc(var(--base-size) * 2);
  border: solid 2px var(--clr-light-700);
  border-radius: 0.2rem;
  max-height: 12rem;

  &:focus,
  &:focus-within,
  &:active,
  :focus-visible {
    border: solid 2px var(--clr-accent-700);
    outline: none;
  }
}
